<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import './header.<%= styleSheetExt %>';

import * as React from 'react';
import { Translate<% if (enableI18nRTL) { %>, Storage<% } %> } from 'react-jhipster';
import {
  Navbar, Nav, NavItem, NavLink, NavbarToggler, NavbarBrand, Collapse,
  UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem
} from 'reactstrap';
import FontAwesomeIcon from '@fortawesome/react-fontawesome';

import { NavLink as Link } from 'react-router-dom';
import LoadingBar from 'react-redux-loading-bar';

<%_ if (authenticationType === 'oauth2') { _%>
import { getLoginUrl } from 'app/shared/util/url-utils';
<%_ } _%>
<%_ if (enableTranslation) { _%>
import { locales<% if (enableI18nRTL) { %>, isRTL<% } %> } from 'app/config/translation';
<%_ } _%>
import appConfig from 'app/config/constants';

export interface IHeaderProps {
  isAuthenticated: boolean;
  isAdmin: boolean;
  ribbonEnv: string;
  isInProduction: boolean;
  isSwaggerEnabled: boolean;
<%_ if (enableTranslation) { _%>
  currentLocale: string;
  onLocaleChange: Function;
<%_ } _%>
}

export interface IHeaderState {
  menuOpen: boolean
}

const BrandIcon = props => (
  <div {...props} className="brand-icon">
    <img
      src="static/images/logo-jhipster-react.svg"
      alt="Logo"
    />
  </div>
);

export default class Header extends React.Component<IHeaderProps, IHeaderState> {
  state: IHeaderState = {
      menuOpen: false
  };
  <%_ if (enableI18nRTL) { _%>
  componentDidMount () {
    document.querySelector('html').setAttribute('dir', isRTL(Storage.local.get('locale')) ? 'rtl' : 'ltr');
  };
  <%_ } _%>

  <%_ if (enableTranslation) { _%>
  handleLocaleChange = event => {
    this.props.onLocaleChange(event.target.value);
    <%_ if (enableI18nRTL) { _%>
    document.querySelector('html').setAttribute('dir', isRTL(event.target.value) ? 'rtl' : 'ltr');
    <%_ } _%>
  }
  <%_ } _%>

  renderDevRibbon = () => this.props.isInProduction === false ? (
    <div className="ribbon dev">
      <a href="">
        <%_ if (enableTranslation) { _%>
        <Translate contentKey={`global.ribbon.${this.props.ribbonEnv}`} />
        <%_ } else { _%>
        Development
        <%_ } _%>
      </a>
    </div>
  ) : null;

  toggleMenu = () => {
    this.setState({ menuOpen: !this.state.menuOpen });
  }

  render() {
    const {<%_ if (enableTranslation) { _%>currentLocale,<%_ } _%> isAuthenticated, isAdmin } = this.props;
    const entityMenuItems = [
      /* jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here */
      <span key="dummy-placeholder"/> /* workaround to avoid error when there are no entities */
    ];
    /* jhipster-needle-add-element-to-menu - JHipster will add new menu items here */
    const adminMenuItems = [
    <%_ if (applicationType === 'gateway') { _%>
      <DropdownItem tag={Link} key="gateway" to="/admin/gateway"><FontAwesomeIcon icon="road" /> Gateway</DropdownItem>,
    <%_ } _%>
    <%_ if (!skipUserManagement) { _%>
      <DropdownItem tag={Link} key="user-management" to="/admin/user-management"><FontAwesomeIcon icon="user" /> User Management</DropdownItem>,
    <%_ } _%>
    <%_ if (websocket === 'spring-websocket') { _%>
      <DropdownItem tag={Link} key="tracker" to="/admin/tracker"><FontAwesomeIcon icon="eye" /> Tracker</DropdownItem>,
    <%_ } _%>
      <DropdownItem tag={Link} key="metrics" to="/admin/metrics"><FontAwesomeIcon icon="tachometer-alt" /> Metrics</DropdownItem>,
      <DropdownItem tag={Link} key="health" to="/admin/health"><FontAwesomeIcon icon="heart" /> Health</DropdownItem>,
      <DropdownItem tag={Link} key="configuration" to="/admin/configuration"><FontAwesomeIcon icon="list" /> Configuration</DropdownItem>,
      <%_ if (databaseType !== 'cassandra') { _%>
      <DropdownItem tag={Link} key="audits" to="/admin/audits"><FontAwesomeIcon icon="bell" /> Audits</DropdownItem>,
      <%_ } _%>
      /* jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here */
      <DropdownItem tag={Link} key="logs" to="/admin/logs"><FontAwesomeIcon icon="tasks" /> Logs</DropdownItem>
    ];

    const swaggerItem = (
      <DropdownItem tag={Link} key="docs" to="/admin/docs">
        <FontAwesomeIcon icon="book" /> API Docs
      </DropdownItem>
    );

    <% if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { %>
    const databaseItem = [
      <DropdownItem tag="a" key="h2-console" href="./h2-console" target="_tab">
        <FontAwesomeIcon icon="hdd" /> Database
      </DropdownItem>
    ];
    <%_ } _%>

    const accountMenuItems = [];
    if (isAuthenticated) {
      accountMenuItems.push(
        <%_ if (authenticationType !== 'oauth2') { _%>
        <DropdownItem tag={Link} key="settings" to="/account/settings"><FontAwesomeIcon icon="wrench" /> Settings</DropdownItem>,
        <DropdownItem tag={Link} key="password" to="/account/password"><FontAwesomeIcon icon="clock" /> Password</DropdownItem>,
        <%_ } _%>
        <%_ if (authenticationType === 'session') { _%>
        <DropdownItem tag={Link} key="sessions" to="/account/sessions"><FontAwesomeIcon icon="cloud" /> Sessions</DropdownItem>,
        <%_ } _%>
        <DropdownItem tag={Link} key="logout" to="/logout"><FontAwesomeIcon icon="sign-out-alt" /> Logout</DropdownItem>
      );
    } else {
      <%_ if (authenticationType !== 'oauth2') { _%>
      accountMenuItems.push(
        <DropdownItem tag={Link} key="login" to="/login"><FontAwesomeIcon icon="sign-in-alt" /> Login</DropdownItem>,
        <DropdownItem tag={Link} key="register" to="/register"><FontAwesomeIcon icon="sign-in-alt" /> Register</DropdownItem>
      );
      <%_ } else { _%>
      accountMenuItems.push(
        <DropdownItem tag="a" key="login" href={getLoginUrl()}><FontAwesomeIcon icon="sign-in-alt" /> Login</DropdownItem>
      );
      <%_ } _%>
    }

    const entitiesMenu = (
      <UncontrolledDropdown nav inNavbar key="entities">
        <DropdownToggle nav caret className="d-flex align-items-center">
          <FontAwesomeIcon icon="th-list" />
          <span>Entities</span>
        </DropdownToggle>
        <DropdownMenu right>{entityMenuItems}</DropdownMenu>
      </UncontrolledDropdown>
    );
    const adminMenu = (
      <UncontrolledDropdown nav inNavbar key="admin">
        <DropdownToggle nav caret className="d-flex align-items-center">
          <FontAwesomeIcon icon="user-plus" />
          <span>Administration</span>
        </DropdownToggle>
        <DropdownMenu right style={{ width: '130%' }}>
          {adminMenuItems}
          {this.props.isSwaggerEnabled ? swaggerItem : null}
          <% if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { %>
          {!this.props.isInProduction ? databaseItem : null}
          <%_ } _%>
        </DropdownMenu>
      </UncontrolledDropdown>
    );

    return (
      <div id="app-header">
        {this.renderDevRibbon()}
        <LoadingBar className="loading-bar"/>
        <Navbar dark expand="sm" fixed="top" className="jh-navbar">
          <NavbarToggler aria-label="Menu" onClick={this.toggleMenu} />
          <NavbarBrand tag={Link} to="/" className="brand-logo">
            <BrandIcon />
            <span className="brand-title"><Translate contentKey="global.title"><%= capitalizedBaseName %></Translate></span>
            <span className="navbar-version">{appConfig.VERSION}</span>
          </NavbarBrand>
          <Collapse isOpen={this.state.menuOpen} navbar>
            <Nav className="ml-auto" navbar>
              <NavItem>
                <NavLink tag={Link} to="/" className="d-flex align-items-center">
                  <FontAwesomeIcon icon="home" />
                  <span>Home</span>
                </NavLink>
              </NavItem>
              {isAuthenticated ? (isAdmin ? [ entitiesMenu, adminMenu ] : entitiesMenu) : null}
            <%_ if (enableTranslation) { _%>
              { locales.length > 1 ?
                <UncontrolledDropdown nav inNavbar>
                  <DropdownToggle nav caret className="d-flex align-items-center">
                    <FontAwesomeIcon icon="flag" />
                    <span>{currentLocale.toUpperCase()}</span>
                  </DropdownToggle>
                  <DropdownMenu right>
                    {locales.map(lang => <DropdownItem key={lang} value={lang} onClick={this.handleLocaleChange}>{lang.toUpperCase()}</DropdownItem>)}
                  </DropdownMenu>
                </UncontrolledDropdown> : null
              }
            <%_ } _%>
              <UncontrolledDropdown nav inNavbar>
                <DropdownToggle nav caret className="d-flex align-items-center">
                  <FontAwesomeIcon icon="user" />
                  <span>Account</span>
                </DropdownToggle>
                <DropdownMenu right>
                  {accountMenuItems}
                </DropdownMenu>
              </UncontrolledDropdown>
            </Nav>
          </Collapse>
        </Navbar>
      </div>
    );
  }
}
